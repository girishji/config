Opiton + mouse highlight -> to copy and paste test

==
Look through yasnippets directory in melpa to see all snippets for
python, c/c++ etc.
~/.emacs.d/elpa/yasnippet-snippets-20210408.1234/snippets

==
to join 2 lines:
Place point anywhere on the last line of the group of lines that need joining and call
M-^
repeatedly until all the lines are merged.
Note: It leaves one space between all of the now joined lines.

==

Option-` : to navigate to menu bar (if made visible)

==

smartparens mode:

C-M-f (and b) to match parenthesis
==

very useful: http://tuhdo.github.io/c-ide.html#sec-2

company mode:
General Usage: Completion will start automatically after
you type a few letters. Use M-n and M-p to select, <return> to
complete or <tab> to complete the common part. Search through the
completions with C-s, C-r and C-o. Press M-(digit) to quickly complete
with one of the first 10 candidates. When the completion candidates
are shown, press <f1> to display the documentation for the selected
candidate, or C-w to see its source. Not all back-ends support this.

==
Alt+x fill-paragraph or Alt+q to break a long line into multiple lines.

Alt+x fill-region to break lines in a text selection.

Alt+x set-fill-column [Ctrl+x f] to set the max characters per line used by “fill” commands.

meta-j to open a new comment line

==
Use "ec" emacsclient. This leaves server running. To kill server, M-x kill-emacs

To exit emacsclient, use C-x #

To work on remote GCE VM use tramp option, so server is remote but client is local:
local$ ssh -R12345:localhost:12345 remote
remote$ export EDITOR="emacsclient \
        --server-file=server \
        --tramp=/ssh:remote:"
remote$ $EDITOR /tmp/foo.txt #Should open in local emacs.

==
to write comments that reflow into column width:
turn on auto-fill-mode
Use:
M-j to open new comment lines after previous one
M-; to comment a line
M-q to reflow a paragraph of comments

I have set (setq comment-auto-fill-only-comments t)
with this above stuff will work only in comment section. It does not
automatically break line. Use M-q.

==
M-x customize-variable
use this to set whatever variable, save it, look at .emacs to see how it did it

==
ESS R mode:
C-c C-b ess-eval-buffer
C-c C-c ess-eval-region-or-function-or-paragraph-and-step
C-c C-f ess-eval-function
C-c C-n ess-eval-line-visibly-and-step
C-c C-p ess-eval-paragraph-and-step
C-c C-q ess-quit
C-c C-r ess-eval-region
C-c C-v ess-display-help-on-object
C-c ` ess-show-traceback
C-c ess-eval-buffer-from-here-to-end

I defined:
     (define-key ess-r-mode-map (kbd "M-=") 'ess-cycle-assign)
     (define-key ess-r-mode-map (kbd "<M-RET>")
       'ess-eval-region-or-line-visibly-and-step)
     (define-key ess-r-mode-map (kbd "C-c s")
       'ispell-comments-and-strings)

==
ido mode does not find-file with full path:
press c-x c-f twice.

when you do c-x c-f and paste full path like /Users/gp/opt/miniconda3/bin/conda
it does not work. so do c-x c-f twice:
https://emacs.stackexchange.com/questions/18128/quickly-open-file-by-full-path-in-clipboard

==

kbd macro keyboard macro: use F3 and F4

F3
Start defining a keyboard macro (kmacro-start-macro-or-insert-counter).

F4
If a keyboard macro is being defined, end the definition; otherwise, execute the most recent keyboard macro (kmacro-end-or-call-macro).

https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html

============================================================
ESS Emacs R
============================================================

do C-x 3 (split vertical)
then M-x R (start R)

--
latest ESS does not have binding for "<-", you have to
come up with a shortcut yourself.
--
using company (complete anything) mode for autocompletion
use C-M-/ (or M-/) and Shift-Tab for completion (see emacs.el file)
data table:
dt$ (it pops up column names, or do shift-tab)
functionx(Shift-Tab to popup completion)
backtab dismisses the popup

--
to do underscore: type it twice
there is a package that disables it if you want: https://github.com/mattfidler/ess-smart-underscore.el

--
C-Ret will execute a line and step, ONLY IN standalone emacs (IMP)
C-c C-v will display documentatio on any function (place the cursor over the fn, or type)
C-c C-c to execute a bunch of code between empty lines
C-c C-j to execute one line
C-c M-j to execute one line and step

cheat sheet:
https://ess.r-project.org/refcard.pdf
==

To fill a paragraph in which each line starts with a special marker (which might be a few spaces, giving an indented paragraph), you can use the fill prefix feature. The fill prefix is a string that Emacs expects every line to start with, and which is not included in filling. You can specify a fill prefix explicitly; Emacs can also deduce the fill prefix automatically (see section T.5.5 Adaptive Filling).

C-x .
Set the fill prefix (set-fill-prefix).

==
Code wrapped in eval-after-load will be executed only once, so it is typically used to perform one-time setup such as setting default global values and behaviour. An example might be setting up a default keymap for a particular mode. In eval-after-load code, there's no notion of the "current buffer".

Mode hooks execute once for every buffer in which the mode is enabled, so they're used for per-buffer configuration. Mode hooks are therefore run later than eval-after-load code; this lets them take actions based upon such information as whether other modes are enabled in the current buffer.
